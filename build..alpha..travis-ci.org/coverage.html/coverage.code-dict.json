{"/home/travis/build/npmtest/node-npmtest-grunt-aws-s3/test.js":"/* istanbul instrument in package npmtest_grunt_aws_s3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-aws-s3/lib.npmtest_grunt_aws_s3.js":"/* istanbul instrument in package npmtest_grunt_aws_s3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_aws_s3 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_aws_s3 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-aws-s3/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-aws-s3 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_aws_s3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_aws_s3\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_aws_s3.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_aws_s3.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_aws_s3.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_aws_s3.__dirname + '/lib.npmtest_grunt_aws_s3.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-aws-s3/node_modules/grunt-aws-s3/Gruntfile.js":"/*\n * grunt-aws-s3\n * https://github.com/MathieuLoutre/grunt-aws-s3\n *\n * Copyright (c) 2013 Mathieu Triay\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n\n\tgrunt.registerTask('create_bucket', 'creates the bucket folder', function() {\n\t\tgrunt.file.mkdir(__dirname + '/test/local/bucket');\n\t});\n\n\t// Project configuration.\n\tgrunt.initConfig({\n\t\tjshint: {\n\t\t\tall: [\n\t\t\t\t'tasks/*.js'\n\t\t\t],\n\t\t\toptions: {\n\t\t\t\tjshintrc: '.jshintrc',\n\t\t\t},\n\t\t},\n\t\taws_s3: {\n\t\t\ttest_local: {\n\t\t\t\toptions: {\n\t\t\t\t\tbucket: __dirname + '/test/local/bucket',\n\t\t\t\t\tuploadConcurrency: 1,\n\t\t\t\t\tmock: true,\n\t\t\t\t\tstream: true\n\t\t\t\t},\n\t\t\t\tfiles: [\n\t\t\t\t\t{expand: true, cwd: \"test/local/upload/\", src: ['**'], dest: 'first/', stream: false},\n\t\t\t\t\t{dest: '/', cwd: 'test/local/download/backup/', action: 'download', stream: false},\n\t\t\t\t\t{dest: 'first/otters/updated/', action: 'delete'},\n\t\t\t\t\t{dest: 'punk/', action: 'delete'},\n\t\t\t\t\t{expand: true, cwd: \"test/local/upload/otters/river/\", src: ['**'], dest: 'second/'},\n\t\t\t\t\t{dest: 'otters/funk/', cwd: 'test/local/download/backup/', action: 'download'},\n\t\t\t\t\t{expand: true, cwd: \"test/local/upload/otters/updated/\", src: ['**'], dest: 'second/', differential: true},\n\t\t\t\t\t{expand: true, cwd: \"test/local/upload/otters/updated/\", src: ['**'], dest: 'third/'},\n\t\t\t\t\t{dest: 'third/', action: 'delete', differential: true, cwd: \"test/local/upload/otters/river/\"},\n\t\t\t\t\t{expand: true, cwd: \"test/local/upload/\", src: ['**'], dest: 'fourth/'},\n\t\t\t\t\t{dest: 'fourth/otters/river/', cwd: 'test/local/download/fourth/', action: 'download'},\n\t\t\t\t\t{dest: 'fourth/otters/updated/', cwd: 'test/local/download/fourth/', action: 'download', differential: true},\n\t\t\t\t\t{dest: 'fourth/otters/updated/', cwd: 'test/local/download/fifth/', exclude: \"**/yay*\", action: 'download'},\n\t\t\t\t\t{expand: true, cwd: \"test/local/upload/otters/updated/\", src: ['**'], dest: 'fifth/'},\n\t\t\t\t\t{dest: 'fifth/', exclude: \"**/*copy*\", flipExclude: true, action: 'delete'},\n\t\t\t\t\t{src: 'first/', dest: 'copies/', action: 'copy'},\n\t\t\t\t]\n\t\t\t},\n\t\t\ttest_live: {\n\t\t\t\toptions: {\n\t\t\t\t\tbucket: 'grunt-aws-test-bucket',\n\t\t\t\t\tuploadConcurrency: 100,\n\t\t\t\t\tcopyConcurrency: 100\n\t\t\t\t},\n\t\t\t\tfiles: [\n\t\t\t\t\t{expand: true, cwd: \"test/local/upload/\", src: ['otters/animal.txt'], dest: 'first/', stream: false},\n\t\t\t\t]\n\t\t\t},\n\t\t},\n\t\tmochaTest: {\n\t\t\ttest: {\n\t\t\t\toptions: {\n\t\t\t\t\treporter: 'spec'\n\t\t\t\t},\n\t\t\t\tsrc: ['test/*.js']\n\t\t\t}\n\t\t},\n\t\tclean: {\n\t\t\ttest: ['test/local/**']\n\t\t},\n\t\tcopy: {\n\t\t\tmain: {\n\t\t\t\tfiles: [\n\t\t\t\t\t{expand: true, cwd: 'test/fixtures/', src: ['**'], dest: 'test/local'},\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t});\n\n\t// Actually load this plugin's task(s).\n\tgrunt.loadTasks('./tasks');\n\n\tgrunt.loadNpmTasks('grunt-contrib-jshint');\n\tgrunt.loadNpmTasks('grunt-mocha-test');\n\tgrunt.loadNpmTasks('grunt-contrib-clean');\n\tgrunt.loadNpmTasks('grunt-contrib-copy');\n\n\tgrunt.registerTask('default', ['clean', 'copy', 'create_bucket', 'aws_s3:test_local', 'mochaTest']);\n\tgrunt.registerTask('test-live', ['clean', 'copy', 'aws_s3:test_live']);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-aws-s3/node_modules/grunt-aws-s3/tasks/aws_s3.js":"/*\n * grunt-aws-s3\n * https://github.com/MathieuLoutre/grunt-aws-s3\n *\n * Copyright (c) 2015 Mathieu Triay\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar crypto = require('crypto');\nvar AWS = require('aws-sdk');\nvar mime = require('mime-types');\nvar _ = require('lodash');\nvar async = require('async');\nvar Progress = require('progress');\n\nmodule.exports = function (grunt) {\n\n\tgrunt.registerMultiTask('aws_s3', 'Interact with AWS S3 using the AWS SDK', function () {\n\n\t\tvar done = this.async();\n\n\t\tvar options = this.options({\n\t\t\taccess: 'public-read',\n\t\t\taccessKeyId: process.env.AWS_ACCESS_KEY_ID,\n\t\t\tsecretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n\t\t\tsessionToken: process.env.AWS_SESSION_TOKEN,\n\t\t\tuploadConcurrency: 1,\n\t\t\tdownloadConcurrency: 1,\n\t\t\tcopyConcurrency: 1,\n\t\t\tmime: {},\n\t\t\tparams: {},\n\t\t\tdebug: false,\n\t\t\tmock: false,\n\t\t\tdifferential: false,\n\t\t\tstream: false,\n\t\t\tdisplayChangesOnly: false,\n\t\t\tprogress: 'dots',\n\t\t\toverwrite: true,\n\t\t\tchangedFiles: 'aws_s3_changed'\n\t\t});\n\n\t\t// To deprecate\n\t\tif (options.concurrency !== undefined) {\n\t\t\tgrunt.log.writeln(\"The concurrency option is deprecated, use uploadConcurrency instead\\n\".yellow);\n\t\t\toptions.uploadConcurrency = options.concurrency;\n\t\t}\n\n\t\tvar filePairOptions = {\n\t\t\tdifferential: options.differential, \n\t\t\tstream: options.stream, \n\t\t\tflipExclude: false, \n\t\t\texclude: false\n\t\t};\n\n\t\t// Replace the AWS SDK by the mock package if we're testing\n\t\tif (options.mock) {\n\t\t\tAWS = require('mock-aws-s3');\n\t\t}\n\n\t\tif (options.awsProfile) {\n\t\t  var credentials = new AWS.SharedIniFileCredentials({profile: options.awsProfile});\n\t\t  AWS.config.credentials = credentials;\n\t\t}\n\n\t\tif (['dots','progressBar','none'].indexOf(options.progress) < 0) {\n\t\t\tgrunt.log.writeln('Invalid progress option; defaulting to dots\\n'.yellow);\n\t\t\toptions.progress = 'dots';\n\t\t}\n\n\t\t// List of acceptable params for an upload\n\t\tvar put_params = ['CacheControl', 'ContentDisposition', 'ContentEncoding',\n\t\t\t'ContentLanguage', 'ContentLength', 'ContentMD5', 'Expires', 'GrantFullControl',\n\t\t\t'GrantRead', 'GrantReadACP', 'GrantWriteACP', 'Metadata', 'ServerSideEncryption',\n\t\t\t'StorageClass', 'WebsiteRedirectLocation', 'ContentType'];\n\n\t\t// Checks that all params are in put_params\n\t\tvar isValidParams = function (params) {\n\n\t\t\treturn _.every(_.keys(params), function (key) { \n\t\t\t\treturn _.contains(put_params, key); \n\t\t\t});\n\t\t};\n\n\t\tvar getObjectURL = function (file) {\n\n\t\t\tfile = file || '';\n\t\t\treturn s3.endpoint.href + options.bucket + '/' + file;\n\t\t};\n\n\t\t// Get the key URL relative to a path string \n\t\tvar getRelativeKeyPath = function (key, dest) {\n\n\t\t\tvar path;\n\n\t\t\tif (_.last(dest) === '/') {\n\t\t\t\t// if the path string is a directory, remove it from the key\n\t\t\t\tpath = key.replace(dest, '');\n\t\t\t}\n\t\t\telse if (key.replace(dest, '') === '') {\n\t\t\t\tpath = _.last(key.split('/'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpath = key;\n\t\t\t}\n\n\t\t\treturn path;\n\t\t};\n\n\t\tvar hashFile = function (options, callback) {\n\n\t\t\tif (options.stream) {\n\t\t\t\tvar local_stream = fs.ReadStream(options.file_path);\n\t\t\t\tvar hash = crypto.createHash('md5');\n\n\t\t\t\tlocal_stream.on('end', function () {\n\t\t\t\t\t// S3's ETag has quotes around it...\n\t\t\t\t\tcallback(null, '\"' + hash.digest('hex') + '\"');\n\t\t\t\t});\n\n\t\t\t\tlocal_stream.on('error', function (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t});\n\n\t\t\t\tlocal_stream.on('data', function (data) {\n\t\t\t\t\thash.update(data);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar local_buffer = grunt.file.read(options.file_path, { encoding: null });\n\t\t\t\tcallback(null, '\"' + crypto.createHash('md5').update(local_buffer).digest('hex') + '\"');\n\t\t\t}\n\t\t};\n\n\t\t// Checks that local file is 'date_compare' than server file\n\t\tvar checkFileDate = function (options, callback) {\n\n\t\t\tfs.stat(options.file_path, function (err, stats) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar local_date = new Date(stats.mtime).getTime();\n\t\t\t\t\tvar server_date = new Date(options.server_date).getTime();\n\n\t\t\t\t\tif (options.compare_date === 'newer') {\n\t\t\t\t\t\tcallback(null, local_date > server_date);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcallback(null, local_date < server_date);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tvar isFileDifferent = function (options, callback) {\n\t\t\t\n\t\t\thashFile(options, function (err, md5_hash) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (md5_hash === options.server_hash) {\n\t\t\t\t\t\tcallback(null, false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (options.server_date) {\n\t\t\t\t\t\t\toptions.compare_date = options.compare_date || 'older';\n\t\t\t\t\t\t\tcheckFileDate(options, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcallback(null, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tif (!options.bucket) {\n\t\t\tgrunt.warn(\"Missing bucket in options\");\n\t\t}\n\n\t\tvar s3_options = {\n\t\t\tbucket: options.bucket,\n\t\t\taccessKeyId: options.accessKeyId,\n\t\t\tsecretAccessKey: options.secretAccessKey,\n\t\t\tsessionToken: options.sessionToken\n\t\t};\n\n\t\tif (!options.region) {\n\t\t\tgrunt.log.writeln(\"No region defined. S3 will default to US Standard\\n\".yellow);\n\t\t} \n\t\telse {\n\t\t\ts3_options.region = options.region;\n\t\t}\n\n\t\tif (options.endpoint) {\n\t\t\ts3_options.endpoint = options.endpoint;\n\t\t}\n\n\t\tif (options.params) {\n\t\t\tif (!isValidParams(options.params)) {\n\t\t\t\tgrunt.warn('\"params\" can only be ' + put_params.join(', '));\n\t\t\t}\n\t\t}\n\n\t\t// Allow additional (not required) options\n\t\t_.extend(s3_options, _.pick(options, ['maxRetries', 'sslEnabled', 'httpOptions', 'signatureVersion', 's3ForcePathStyle']));\n\n\t\tvar s3 = new AWS.S3(s3_options);\n\n\t\tvar dest;\n\t\tvar is_expanded;\n\t\tvar objects = [];\n\t\tvar uploads = [];\n\n\t\t// Because Grunt expands the files array automatically, \n\t\t// we need to group the uploads together to make the difference between actions.\n\t\tvar pushUploads = function() {\n\n\t\t\tif (uploads.length > 0) {\n\t\t\t\tobjects.push({ action: 'upload', files: uploads });\n\t\t\t\tuploads = [];\n\t\t\t}\n\t\t};\n\n\t\tthis.files.forEach(function (filePair) {\n\n\t\t\tis_expanded = filePair.orig.expand || false;\n\n\t\t\tif (filePair.action === 'delete') {\n\n\t\t\t\t_.defaults(filePair, filePairOptions);\n\n\t\t\t\tif (!filePair.dest) {\n\t\t\t\t\tgrunt.fatal('No \"dest\" specified for deletion. No need to specify a \"src\"');\n\t\t\t\t}\n\t\t\t\telse if (filePair.differential && !filePair.cwd) {\n\t\t\t\t\tgrunt.fatal('Differential delete needs a \"cwd\"');\n\t\t\t\t}\n\n\t\t\t\tpushUploads();\n\n\t\t\t\tfilePair.dest = (filePair.dest === '/') ? '' : filePair.dest;\n\t\t\t\t\n\t\t\t\tobjects.push(filePair);\n\t\t\t}\n\t\t\telse if (filePair.action === 'download') {\n\n\t\t\t\tif (is_expanded) {\n\t\t\t\t\tgrunt.fatal('You cannot expand the \"src\" for downloads');\n\t\t\t\t}\n\t\t\t\telse if (!filePair.dest) {\n\t\t\t\t\tgrunt.fatal('No \"dest\" specified for downloads');\n\t\t\t\t}\n\t\t\t\telse if (!filePair.cwd || filePair.src) {\n\t\t\t\t\tgrunt.fatal('Specify a \"cwd\" but not a \"src\" for downloads');\n\t\t\t\t}\n\n\t\t\t\tpushUploads();\n\n\t\t\t\tfilePair.dest = (filePair.dest === '/') ? '' : filePair.dest;\n\n\t\t\t\tobjects.push(_.defaults(filePair, filePairOptions));\n\t\t\t}\n\t\t\telse if (filePair.action === 'copy') {\n\n\t\t\t\tif (is_expanded) {\n\t\t\t\t\tgrunt.fatal('You cannot expand the \"src\" for copies');\n\t\t\t\t}\n\t\t\t\telse if (!filePair.dest) {\n\t\t\t\t\tgrunt.fatal('No \"dest\" specified for copies');\n\t\t\t\t}\n\t\t\t\telse if (filePair.cwd || !filePair.src) {\n\t\t\t\t\tgrunt.fatal('Specify a \"src\" but not a \"cwd\" for copies');\n\t\t\t\t}\n\n\t\t\t\tpushUploads();\n\n\t\t\t\tfilePair.dest = (filePair.dest === '/') ? '' : filePair.dest;\n\n\t\t\t\tobjects.push(_.defaults(filePair, filePairOptions));\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\tif (!filePair.dest) {\n\t\t\t\t\tgrunt.fatal(\"Specify a dest for uploads (e.g. '/' for the root)\");\n\t\t\t\t}\n\t\t\t\telse if (filePair.params && !isValidParams(filePair.params)) {\n\t\t\t\t\tgrunt.warn('\"params\" can only be ' + put_params.join(', '));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfilePair.params = _.defaults(filePair.params || {}, options.params);\n\t\t\t\t\t_.defaults(filePair, filePairOptions);\n\n\t\t\t\t\tfilePair.src.forEach(function (src) {\n\n\t\t\t\t\t\t// Prevents creating empty folders\n\t\t\t\t\t\tif (!grunt.file.isDir(src)) {\n\n\t\t\t\t\t\t\tif (_.last(filePair.dest) === '/') {\n\t\t\t\t\t\t\t\tdest = (is_expanded) ? filePair.dest : unixifyPath(path.join(filePair.dest, src));\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdest = filePair.dest;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (_.first(dest) === '/') {\n\t\t\t\t\t\t\t\tdest = dest.slice(1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// '.' means that no dest path has been given (root). Nothing to create there.\n\t\t\t\t\t\t\tif (dest !== '.') {\n\n\t\t\t\t\t\t\t\tuploads.push(_.defaults({\n\t\t\t\t\t\t\t\t\tneed_upload: true,\n\t\t\t\t\t\t\t\t\tsrc: src, \n\t\t\t\t\t\t\t\t\tdest: dest\n\t\t\t\t\t\t\t\t}, filePair));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tpushUploads();\n\n\t\t// Will list *all* the content of the bucket given in options\n\t\t// Recursively requests the bucket with a marker if there's more than\n\t\t// 1000 objects. Ensures uniqueness of keys in the returned list. \n\t\tvar listObjects = function (prefix, callback, marker, contents) {\n\n\t\t\tvar search = {\n\t\t\t\tPrefix: prefix, \n\t\t\t\tBucket: options.bucket\n\t\t\t};\n\n\t\t\tif (marker) {\n\t\t\t\tsearch.Marker = marker;\n\t\t\t}\n\n\t\t\ts3.listObjects(search, function (err, list) { \n\n\t\t\t\tif (!err) {\n\n\t\t\t\t\tvar objects = (contents) ? contents.concat(list.Contents) : list.Contents;\n\n\t\t\t\t\tif (list.IsTruncated) {\n\t\t\t\t\t\tvar new_marker = _.last(list.Contents).Key;\n\t\t\t\t\t\tlistObjects(prefix, callback, new_marker, objects);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcallback(_.uniq(objects, function (o) { return o.Key; }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgrunt.fatal('Failed to list content of bucket ' + options.bucket + '\\n' + err);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tvar deleteObjects = function (task, callback) {\n\n\t\t\tgrunt.log.writeln('Deleting the content of ' + getObjectURL(task.dest).cyan);\n\n\t\t\t// List all the objects using dest as the prefix\n\t\t\tlistObjects(task.dest, function (to_delete) {\n\n\t\t\t\t// List local content if it's a differential task\n\t\t\t\tvar local_files = (task.differential) ? grunt.file.expand({ cwd: task.cwd }, [\"**\"]) : [];\n\n\t\t\t\t_.each(to_delete, function (o) {\n\n\t\t\t\t\to.need_delete = true;\n\t\t\t\t\to.excluded = task.exclude && grunt.file.isMatch(task.exclude, o.Key);\n\n\t\t\t\t\tif (task.exclude && task.flipExclude) {\n\t\t\t\t\t\to.excluded = !o.excluded;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (task.differential && !o.excluded) {\n\t\t\t\t\t\t// Exists locally or not (remove dest in the key to get the local path)\n\t\t\t\t\t\to.need_delete = local_files.indexOf(getRelativeKeyPath(o.Key, task.dest)) === -1;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Just list what needs to be deleted so it can be sliced if necessary\n\t\t\t\tvar delete_list = _.filter(to_delete, function (o) { return o.need_delete && !o.excluded; });\n\n\t\t\t\tif (options.debug) {\n\t\t\t\t\tcallback(null, to_delete);\n\t\t\t\t}\n\t\t\t\telse if (delete_list.length > 0) {\n\n\t\t\t\t\t// deleteObjects requests can only take up to 1000 keys\n\t\t\t\t\t// If we are deleting more than a 1000 objects, we need slices\n\t\t\t\t\tvar slices = Math.ceil(delete_list.length/1000);\n\t\t\t\t\tvar errors = [];\n\t\t\t\t\tvar failed = [];\n\t\t\t\t\tvar deleted = [];\n\t\t\t\t\tvar calls = 0;\n\n\t\t\t\t\tif(options.progress === 'progressBar'){\n\t\t\t\t\t\tvar progress = new Progress('[:bar] :current/:total :etas', {total : delete_list.length});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar end = function (err, data) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\terrors.push(err);\n\t\t\t\t\t\t\tdata = data || {};\n\t\t\t\t\t\t\tfailed = failed.concat(data.Errors || []);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdeleted = deleted.concat(data.Deleted);\n\t\t\t\t\t\t\tswitch(options.progress){\n\t\t\t\t\t\t\t\tcase 'progressBar':\n\t\t\t\t\t\t\t\t\tprogress.tick();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'dots':\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgrunt.log.write('.'.green);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (++calls === slices) {\n\t\t\t\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\t\t\t\tcallback(JSON.stringify(errors), failed);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tcallback(null, to_delete);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tvar deleteSlice = function (i) {\n\n\t\t\t\t\t\tvar start = 1000 * i;\n\t\t\t\t\t\tvar slice = {\n\t\t\t\t\t\t\tObjects: _.map(delete_list.slice(start, start + 1000), function (o) { return { Key: o.Key }; })\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\ts3.deleteObjects({ Delete: slice, Bucket: options.bucket }, function (err, data) { end(err, data); });\n\t\t\t\t\t};\n\n\t\t\t\t\tfor (var i = 0; i < slices; i++) {\n\t\t\t\t\t\tdeleteSlice(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallback(null, (to_delete.length > 0) ? to_delete : null);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tvar doCopy = function (object, callback) {\n\n\t\t\tif (options.debug || !object.need_copy || object.excluded) {\n\t\t\t\tcallback(null, false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts3.copyObject({ Key: object.dest, CopySource: encodeURIComponent(options.bucket + '/' + object.Key), Bucket: options.bucket, ACL: options.access }, function (err, data) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcallback(null, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tvar copyObjects = function (task, callback) {\n\n\t\t\tgrunt.log.writeln('Copying the content of ' + getObjectURL(task.orig.src[0]).cyan + ' to ' + getObjectURL(task.dest).cyan);\n\n\t\t\t// List all the objects using src as the prefix\n\t\t\tlistObjects(task.orig.src[0], function (to_copy) {\n\n\t\t\t\tif (to_copy.length === 0) {\n\t\t\t\t\tcallback(null, null);\n\t\t\t\t}\n\t\t\t\telse {\n\n\t\t\t\t\tvar copy_queue = async.queue(function (object, copyCallback) {\n\n\t\t\t\t\t\tvar key = getRelativeKeyPath(object.Key, task.orig.src[0]); // Remove the src in the key\n\t\t\t\t\t\tobject.dest = task.dest + key;\n\t\t\t\t\t\tobject.need_copy = _.last(object.dest) !== '/'; // no need to write directories\n\t\t\t\t\t\tobject.excluded = task.exclude && grunt.file.isMatch(task.exclude, object.Key);\n\n\t\t\t\t\t\tif (task.exclude && task.flipExclude) {\n\t\t\t\t\t\t\tobject.excluded = !object.excluded;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetImmediate(doCopy, object, copyCallback);\n\n\t\t\t\t\t}, options.copyConcurrency);\n\n\t\t\t\t\tcopy_queue.drain = function () {\n\n\t\t\t\t\t\tcallback(null, to_copy);\n\t\t\t\t\t};\n\n\t\t\t\t\tif (options.progress === 'progressBar') {\n\t\t\t\t\t\tvar progress = new Progress('[:bar] :current/:total :etas', { total : to_copy.length });\n\t\t\t\t\t}\n\n\t\t\t\t\tcopy_queue.push(to_copy, function (err, copied) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tgrunt.fatal('Failed to copy ' + getObjectURL(this.data.Key) + '\\n' + err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tswitch (options.progress) {\n\t\t\t\t\t\t\t\tcase 'progressBar':\n\t\t\t\t\t\t\t\t\tprogress.tick();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'dots':\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tvar dot = (copied) ? '.'.green : '.'.yellow;\n\t\t\t\t\t\t\t\t\tgrunt.log.write(dot);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tvar doDownload = function (object, callback) {\n\n\t\t\tif (options.debug || !object.need_download || object.excluded) {\n\t\t\t\tcallback(null, false);\n\t\t\t}\n\t\t\telse if (object.stream) {\n\t\t\t\tgrunt.file.mkdir(path.dirname(object.dest));\n\n\t\t\t\tvar stream = fs.createWriteStream(object.dest);\n\t\t\t\tvar s3_object = s3.getObject({ Key: object.Key, Bucket: options.bucket }).createReadStream();\n\n\t\t\t\tstream.on('finish', function () {\n\t\t\t\t\tcallback(null, true);\n\t\t\t\t});\n\n\t\t\t\ts3_object.on('error', function (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t});\n\n\t\t\t\tstream.on('error', function (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t});\n\n\t\t\t\ts3_object.pipe(stream);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts3.getObject({ Key: object.Key, Bucket: options.bucket }, function (err, data) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tgrunt.file.write(object.dest, data.Body);\n\t\t\t\t\t\tcallback(null, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tvar downloadObjects = function (task, callback) {\n\n\t\t\tgrunt.log.writeln('Downloading the content of ' + getObjectURL(task.dest).cyan + ' to ' + task.cwd.cyan);\n\n\t\t\t// List all the objects using dest as the prefix\n\t\t\tlistObjects(task.dest, function (to_download) {\n\n\t\t\t\t// List local content if it's a differential task\n\t\t\t\tvar local_files = (task.differential) ? grunt.file.expand({ cwd: task.cwd }, [\"**\"]) : [];\n\n\t\t\t\tif (to_download.length === 0) {\n\t\t\t\t\tcallback(null, null);\n\t\t\t\t}\n\t\t\t\telse {\n\n\t\t\t\t\tvar download_queue = async.queue(function (object, downloadCallback) {\n\n\t\t\t\t\t\tvar key = getRelativeKeyPath(object.Key, task.dest); // Remove the dest in the key to not duplicate the path with cwd\n\t\t\t\t\t\tobject.dest = task.cwd + key;\n\t\t\t\t\t\tobject.stream = task.stream;\n\t\t\t\t\t\tobject.need_download = _.last(object.dest) !== '/'; // no need to write directories\n\t\t\t\t\t\tobject.excluded = task.exclude && grunt.file.isMatch(task.exclude, object.Key);\n\n\t\t\t\t\t\tif (task.exclude && task.flipExclude) {\n\t\t\t\t\t\t\tobject.excluded = !object.excluded;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (task.differential && object.need_download && !object.excluded) {\n\t\t\t\t\t\t\tvar local_index = local_files.indexOf(key);\n\n\t\t\t\t\t\t\t// If file exists locally we need to check if it's different\n\t\t\t\t\t\t\tif (local_index !== -1) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Check md5 and if file is older than server file\n\t\t\t\t\t\t\t\tvar check_options = { \n\t\t\t\t\t\t\t\t\tfile_path: object.dest, \n\t\t\t\t\t\t\t\t\tserver_hash: object.ETag, \n\t\t\t\t\t\t\t\t\tserver_date: object.LastModified, \n\t\t\t\t\t\t\t\t\tdate_compare: 'older' \n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tisFileDifferent(check_options, function (err, different) {\n\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\tdownloadCallback(err);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tobject.need_download = different;\n\t\t\t\t\t\t\t\t\t\tsetImmediate(doDownload, object, downloadCallback);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tsetImmediate(doDownload, object, downloadCallback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tsetImmediate(doDownload, object, downloadCallback);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}, options.downloadConcurrency);\n\n\t\t\t\t\tdownload_queue.drain = function () {\n\n\t\t\t\t\t\tcallback(null, to_download);\n\t\t\t\t\t};\n\n\t\t\t\t\tif(options.progress === 'progressBar'){\n\t\t\t\t\t\tvar progress = new Progress('[:bar] :current/:total :etas', {total : to_download.length});\n\t\t\t\t\t}\n\n\t\t\t\t\tdownload_queue.push(to_download, function (err, downloaded) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tgrunt.fatal('Failed to download ' + getObjectURL(this.data.Key) + '\\n' + err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tswitch(options.progress){\n\t\t\t\t\t\t\t\tcase 'progressBar':\n\t\t\t\t\t\t\t\t\tprogress.tick();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'dots':\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tvar dot = (downloaded) ? '.'.green : '.'.yellow;\n\t\t\t\t\t\t\t\t\tgrunt.log.write(dot);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tvar doGzipRename = function (object, options) {\n\t\t\tvar lastDot = object.src.lastIndexOf('.')\n\n\t\t\tif (object.src.substr(lastDot) === '.gz') {\n\n\t\t\t\tvar originalPath = object.src.substr(0, lastDot)\n\n\t\t\t\tobject.params = _.defaults({\n\t\t\t\t\tContentType: mime.contentType(mime.lookup(originalPath) || \"application/octet-stream\"),\n\t\t\t\t\tContentEncoding: 'gzip'\n\t\t\t\t}, object.params || {})\n\n\t\t\t\tif (options.gzipRename && object.src.match(/\\.[^.]+\\.gz$/)) {\n\n\t\t\t\t\tif (options.gzipRename === 'ext') {\n\t\t\t\t\t\tobject.dest = object.dest.replace(/\\.gz$/, '')\n\t\t\t\t\t}\n\t\t\t\t\telse if (options.gzipRename === 'gz') {\n\t\t\t\t\t\tobject.dest = object.dest.replace(/\\.[^.]+\\.gz$/, '.gz')\n\t\t\t\t\t}\n\t\t\t\t\telse if (options.gzipRename === 'swap') {\n\t\t\t\t\t\tobject.dest = object.dest.replace(/(\\.[^.]+)\\.gz$/, '.gz$1')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar doUpload = function (object, callback) {\n\n\t\t\tif (object.need_upload && !options.debug) {\n\n\t\t\t\tvar type = options.mime[object.src] || object.params.ContentType || mime.contentType(mime.lookup(object.src) || \"application/octet-stream\");\n\t\t\t\tvar upload = _.defaults({\n\t\t\t\t\tContentType: type,\n\t\t\t\t\tKey: object.dest,\n\t\t\t\t\tBucket: options.bucket,\n\t\t\t\t\tACL: options.access\n\t\t\t\t}, object.params);\n\n\t\t\t\tif (object.stream) {\n\t\t\t\t\tupload.Body = fs.createReadStream(object.src);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tupload.Body = grunt.file.read(object.src, { encoding: null });\n\t\t\t\t}\n\n\t\t\t\ts3.putObject(upload, function (err, data) {\n\t\t\t\t\tcallback(err, true);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcallback(null, false);\n\t\t\t}\n\t\t};\n\n\t\tvar uploadObjects = function (task, callback) {\n\n\t\t\tgrunt.log.writeln('Uploading to ' + getObjectURL(task.dest).cyan);\n\n\t\t\tvar startUploads = function (server_files) {\n\n\t\t\t\tvar upload_queue = async.queue(function (object, uploadCallback) {\n\n\t\t\t\t\tdoGzipRename(object, options);\n\n\t\t\t\t\tvar server_file = _.where(server_files, { Key: object.dest })[0];\n\n\t\t\t\t\tif (server_file && !options.overwrite) {\n\t\t\t\t\t\tuploadCallback(object.dest + \" already exists!\")\n\t\t\t\t\t}\n\t\t\t\t\telse if (server_file && object.differential) {\n\n\t\t\t\t\t\tisFileDifferent({ file_path: object.src, server_hash: server_file.ETag }, function (err, different) {\n\t\t\t\t\t\t\tobject.need_upload = different;\n\t\t\t\t\t\t\tsetImmediate(doUpload, object, uploadCallback);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsetImmediate(doUpload, object, uploadCallback);\n\t\t\t\t\t}\n\n\t\t\t\t}, options.uploadConcurrency);\n\n\t\t\t\tupload_queue.drain = function () {\n\n\t\t\t\t\tcallback(null, task.files);\n\t\t\t\t};\n\n\t\t\t\tif (options.progress === 'progressBar') {\n\t\t\t\t\tvar progress = new Progress('[:bar] :current/:total :etas', { total : task.files.length });\n\t\t\t\t}\n\n\t\t\t\tupload_queue.push(task.files, function (err, uploaded) {\n\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tgrunt.fatal('Failed to upload ' + this.data.src + ' with bucket ' + options.bucket + '\\n' + err);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tswitch(options.progress){\n\t\t\t\t\t\t\tcase 'progressBar':\n\t\t\t\t\t\t\t\tprogress.tick();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'dots':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tvar dot = (uploaded) ? '.'.green : '.'.yellow;\n\t\t\t\t\t\t\t\tgrunt.log.write(dot);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tvar unique_dests = _(task.files)\n\t\t\t\t.filter('differential')\n\t\t\t\t.pluck('dest')\n\t\t\t\t.compact()\n\t\t\t\t.map(path.dirname)\n\t\t\t\t.sort()\n\t\t\t\t.uniq(true)\n\t\t\t\t.reduce(function (res, dest) {\n\n\t\t\t\t\tvar last_path = res[res.length - 1];\n\n\t\t\t\t\tif (!last_path || dest.indexOf(last_path) !== 0) {\n\t\t\t\t\t\tres.push(dest);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn res;\n\t\t\t\t}, []);\n\n\t\t\t// If there's a '.', we need to scan the whole bucket\n\t\t\tif (unique_dests.indexOf('.') > -1 || !options.overwrite) {\n\t\t\t\tunique_dests = [''];\n\t\t\t}\n\n\t\t\tif (unique_dests.length) {\n\t\t\t\tasync.mapLimit(unique_dests, options.uploadConcurrency, function (dest, callback) {\n\t\t\t\t\tlistObjects(dest, function (objects) {\n\t\t\t\t\t\tcallback(null, objects);\n\t\t\t\t\t});\n\t\t\t\t}, function (err, objects) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t} \n\t\t\t\t\telse {\n\t\t\t\t\t\tvar server_files = Array.prototype.concat.apply([], objects);\n\t\t\t\t\t\tstartUploads(server_files);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tstartUploads([]);\n\t\t\t}\n\t\t};\n\n\t\tvar queue = async.queue(function (task, callback) {\n\n\t\t\tif (task.action === 'delete') {\n\t\t\t\tdeleteObjects(task, callback);\n\t\t\t}\n\t\t\telse if (task.action === 'download') {\n\t\t\t\tdownloadObjects(task, callback);\n\t\t\t}\n\t\t\telse if (task.action === 'copy') {\n\t\t\t\tcopyObjects(task, callback);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tuploadObjects(task, callback);\n\t\t\t}\n\t\t}, 1);\n\n\t\tqueue.drain = function () {\n\n\t\t\t_.each(objects, function (o) {\n\n\t\t\t\tif (o.action === \"delete\") {\n\t\t\t\t\tgrunt.log.writeln(o.deleted.toString().green + '/' + o.nb_objects.toString().green + ' objects deleted from ' + (options.bucket + '/' + o.dest).green);\n\t\t\t\t}\n\t\t\t\telse if (o.action === \"download\") {\n\t\t\t\t\tgrunt.log.writeln(o.downloaded.toString().green + '/' + o.nb_objects.toString().green + ' objects downloaded from ' + (options.bucket + '/' + o.dest).green + ' to ' + o.cwd.green);\n\t\t\t\t}\n\t\t\t\telse if (o.action === \"copy\") {\n\t\t\t\t\tgrunt.log.writeln(o.copied.toString().green + '/' + o.nb_objects.toString().green + ' objects copied from ' + (options.bucket + '/' + o.orig.src[0]).green + ' to ' + (options.bucket + '/' + o.dest).green);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgrunt.log.writeln(o.uploaded.toString().green + '/' + o.nb_objects.toString().green + ' objects uploaded to bucket ' + (options.bucket + '/').green);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (options.debug) {\n\t\t\t\tgrunt.log.writeln(\"\\nThe debug option was enabled, no changes have actually been made\".yellow);\n\t\t\t}\n\n\t\t\tvar uploadedFiles = []\n\n\t\t\t_.each(objects, function (o) {\n\t\t\t\tif (!o.action || o.action === 'upload') {\t\n\t\t\t\t\t_.each(o.files, function (file) {\n\t\t\t\t\t\tif (file.need_upload) {\n\t\t\t\t\t\t\tuploadedFiles.push(file.dest)\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tgrunt.config.set(options.changedFiles, uploadedFiles)\n\n\t\t\tdone()\n\t\t};\n\n\t\tif (objects.length === 0) {\n\t\t\tqueue.drain()\n\t\t}\n\t\telse {\n\t\t\tqueue.push(objects, function (err, res) {\n\t\t\t\tvar object_url = getObjectURL(this.data.dest);\n\n\t\t\t\tif (this.data.action === 'delete') {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tif (res && res.length > 0) {\n\t\t\t\t\t\t\tgrunt.log.writeln('Errors (' + res.length.toString().red + ' objects): ' + _.pluck(res, 'Key').join(', ').red);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgrunt.fatal('Deletion failed\\n' + err.toString());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (res && res.length > 0) {\n\t\t\t\t\t\t\tgrunt.log.writeln('\\nList: (' + res.length.toString().cyan + ' objects):');\n\n\t\t\t\t\t\t\tvar deleted = 0;\n\n\t\t\t\t\t\t\t_.each(res, function (file) {\n\n\t\t\t\t\t\t\t\tif (file.need_delete && !file.excluded) {\n\t\t\t\t\t\t\t\t\tdeleted++;\n\t\t\t\t\t\t\t\t\tgrunt.log.writeln('- ' + file.Key.cyan);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tvar sign = (file.excluded) ? '! ' : '- ';\n\t\t\t\t\t\t\t\t\tgrunt.log.writeln(sign + file.Key.yellow);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tthis.data.nb_objects = res.length;\n\t\t\t\t\t\t\tthis.data.deleted = deleted;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tgrunt.log.writeln('Nothing to delete');\n\t\t\t\t\t\t\tthis.data.nb_objects = 0;\n\t\t\t\t\t\t\tthis.data.deleted = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.data.action === 'download') {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tgrunt.fatal('Download failed\\n' + err.toString());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (res && res.length > 0) {\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgrunt.log.writeln('\\nList: (' + res.length.toString().cyan + ' objects):');\n\n\t\t\t\t\t\t\tvar task = this.data;\n\t\t\t\t\t\t\tvar downloaded = 0;\n\n\t\t\t\t\t\t\t_.each(res, function (file) {\n\n\t\t\t\t\t\t\t\tif (file.need_download && !file.excluded) {\n\t\t\t\t\t\t\t\t\tdownloaded++;\n\t\t\t\t\t\t\t\t\tgrunt.log.writeln('- ' + getObjectURL(file.Key).cyan + ' -> ' + (task.cwd + getRelativeKeyPath(file.Key, task.dest)).cyan);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tvar sign = (file.excluded) ? ' =/= ' : ' === ';\n\t\t\t\t\t\t\t\t\tgrunt.log.writeln('- ' + getObjectURL(file.Key).yellow + sign + (task.cwd + getRelativeKeyPath(file.Key, task.dest)).yellow);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tthis.data.nb_objects = res.length;\n\t\t\t\t\t\t\tthis.data.downloaded = downloaded || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tgrunt.log.writeln('Nothing to download');\n\t\t\t\t\t\t\tthis.data.nb_objects = 0;\n\t\t\t\t\t\t\tthis.data.downloaded = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.data.action === 'copy') {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tgrunt.fatal('Copy failed\\n' + err.toString());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (res && res.length > 0) {\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgrunt.log.writeln('\\nList: (' + res.length.toString().cyan + ' objects):');\n\n\t\t\t\t\t\t\tvar task = this.data;\n\t\t\t\t\t\t\tvar copied = 0;\n\n\t\t\t\t\t\t\t_.each(res, function (file) {\n\n\t\t\t\t\t\t\t\tif (file.need_copy && !file.excluded) {\n\t\t\t\t\t\t\t\t\tcopied++;\n\t\t\t\t\t\t\t\t\tgrunt.log.writeln('- ' + (options.bucket + '/' + file.Key).cyan + ' -> ' + (options.bucket + '/' + task.dest + getRelativeKeyPath(file.Key, task.dest)).cyan);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tvar sign = (file.excluded) ? ' =/= ' : ' === ';\n\t\t\t\t\t\t\t\t\tgrunt.log.writeln('- ' + (options.bucket + '/' + file.Key).yellow + sign + (options.bucket + '/' + task.dest + getRelativeKeyPath(file.Key, task.dest)).yellow);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tthis.data.nb_objects = res.length;\n\t\t\t\t\t\t\tthis.data.copied = copied || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tgrunt.log.writeln('Nothing to copy');\n\t\t\t\t\t\t\tthis.data.nb_objects = 0;\n\t\t\t\t\t\t\tthis.data.copied = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tgrunt.fatal('Upload failed\\n' + err.toString());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tgrunt.log.writeln('\\nList: (' + res.length.toString().cyan + ' objects):');\n\n\t\t\t\t\t\tvar uploaded = 0;\n\n\t\t\t\t\t\t_.each(res, function (file) {\n\n\t\t\t\t\t\t\tif (file.need_upload) {\n\t\t\t\t\t\t\t\tuploaded++;\n\t\t\t\t\t\t\t\tgrunt.log.writeln('- ' + file.src.cyan + ' -> ' + (object_url + file.dest).cyan);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (!options.displayChangesOnly) {\n\t\t\t\t\t\t\t\tgrunt.log.writeln('- ' + file.src.yellow + ' === ' + (object_url + file.dest).yellow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.data.nb_objects = res.length;\n\t\t\t\t\t\tthis.data.uploaded = uploaded;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tgrunt.log.writeln();\n\t\t\t});\n\t\t}\n\t});\n\n\tvar unixifyPath = function (filepath) {\n\n\t\tif (process.platform === 'win32') {\n\t\t\treturn filepath.replace(/\\\\/g, '/');\n\t\t} \n\t\telse {\t\n\t\t\treturn filepath;\n\t\t}\n\t};\n};\n"}